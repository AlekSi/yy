// Code generated by yy. DO NOT EDIT.

// Copyright 2015 The gc Authors. All rights reserved.  Use of this source code
// is governed by a BSD-style license that can be found in the LICENSE file.

package gc

import (
	"fmt"
)

func ExampleArgument_case0() {
	fmt.Println(exampleAST(2, "package a ; var b [ 'c' ( 'd' )"))
	// Output:
}

func ExampleArgument_case1() {
	fmt.Println(exampleAST(3, "package a ; var b [ 'c' ( chan d )"))
	// Output:
}

func ExampleArgumentList_case0() {
	fmt.Println(exampleAST(4, "package a ; var b [ 'c' ( 'd' )"))
	// Output:
}

func ExampleArgumentList_case1() {
	fmt.Println(exampleAST(5, "package a ; var b [ 'c' ( 'd' , 'e' )"))
	// Output:
}

func ExampleArrayType_case0() {
	fmt.Println(exampleAST(6, "package a ; var b [ ... ] c ("))
	// Output:
}

func ExampleArrayType_case1() {
	fmt.Println(exampleAST(7, "package a ; var b [ 'c' ] d ("))
	// Output:
}

func ExampleAssignment_case00() {
	fmt.Println(exampleAST(8, "package a ; func b ( ) { 'c' = 'd' ;"))
	// Output:
}

func ExampleAssignment_case01() {
	fmt.Println(exampleAST(9, "package a ; func b ( ) { 'c' += 'd' ;"))
	// Output:
}

func ExampleAssignment_case02() {
	fmt.Println(exampleAST(10, "package a ; func b ( ) { 'c' &^= 'd' ;"))
	// Output:
}

func ExampleAssignment_case03() {
	fmt.Println(exampleAST(11, "package a ; func b ( ) { 'c' &= 'd' ;"))
	// Output:
}

func ExampleAssignment_case04() {
	fmt.Println(exampleAST(12, "package a ; func b ( ) { 'c' /= 'd' ;"))
	// Output:
}

func ExampleAssignment_case05() {
	fmt.Println(exampleAST(13, "package a ; func b ( ) { 'c' <<= 'd' ;"))
	// Output:
}

func ExampleAssignment_case06() {
	fmt.Println(exampleAST(14, "package a ; func b ( ) { 'c' %= 'd' ;"))
	// Output:
}

func ExampleAssignment_case07() {
	fmt.Println(exampleAST(15, "package a ; func b ( ) { 'c' *= 'd' ;"))
	// Output:
}

func ExampleAssignment_case08() {
	fmt.Println(exampleAST(16, "package a ; func b ( ) { 'c' |= 'd' ;"))
	// Output:
}

func ExampleAssignment_case09() {
	fmt.Println(exampleAST(17, "package a ; func b ( ) { 'c' >>= 'd' ;"))
	// Output:
}

func ExampleAssignment_case10() {
	fmt.Println(exampleAST(18, "package a ; func b ( ) { 'c' -= 'd' ;"))
	// Output:
}

func ExampleAssignment_case11() {
	fmt.Println(exampleAST(19, "package a ; func b ( ) { 'c' ^= 'd' ;"))
	// Output:
}

func ExampleBasicLiteral_case0() {
	fmt.Println(exampleAST(20, "package a ; import 'b' %"))
	// Output:
}

func ExampleBasicLiteral_case1() {
	fmt.Println(exampleAST(21, "package a ; import 1.98 %"))
	// Output:
}

func ExampleBasicLiteral_case2() {
	fmt.Println(exampleAST(22, "package a ; import 98i %"))
	// Output:
}

func ExampleBasicLiteral_case3() {
	fmt.Println(exampleAST(23, "package a ; import 98 %"))
	// Output:
}

func ExampleBasicLiteral_case4() {
	fmt.Println(exampleAST(24, "package a ; import \"b\" %"))
	// Output:
}

func ExampleBlock_case0() {
	fmt.Println(exampleAST(26, "package a ; func b ( ) { } ;"))
	// Output:
}

func ExampleBlockOpt_case0() {
	fmt.Println(exampleAST(27, "package a ; func b ( ) ;") == (*BlockOpt)(nil))
	// Output:
}

func ExampleBlockOpt_case1() {
	fmt.Println(exampleAST(28, "package a ; func b ( ) { } ;"))
	// Output:
}

func ExampleBody_case0() {
	fmt.Println(exampleAST(30, "package a ; func b ( ) { if { } ;"))
	// Output:
}

func ExampleCall_case0() {
	fmt.Println(exampleAST(31, "package a ; var b [ 'c' ( ) %"))
	// Output:
}

func ExampleCall_case1() {
	fmt.Println(exampleAST(32, "package a ; var b [ 'c' ( 'd' ) %"))
	// Output:
}

func ExampleCall_case2() {
	fmt.Println(exampleAST(33, "package a ; var b [ 'c' ( 'd' ... ) %"))
	// Output:
}

func ExampleChanType_case0() {
	fmt.Println(exampleAST(34, "package a ; var b chan c ("))
	// Output:
}

func ExampleChanType_case1() {
	fmt.Println(exampleAST(35, "package a ; var b chan<- c ("))
	// Output:
}

func ExampleChanType_case2() {
	fmt.Println(exampleAST(36, "package a ; var b <-chan c ("))
	// Output:
}

func ExampleCommaOpt_case0() {
	fmt.Println(exampleAST(37, "package a ; var b [ chan c ( 'd' )") == (*CommaOpt)(nil))
	// Output:
}

func ExampleCommaOpt_case1() {
	fmt.Println(exampleAST(38, "package a ; var b [ chan c ( 'd' , )"))
	// Output:
}

func ExampleCompLitItem_case0() {
	fmt.Println(exampleAST(39, "package a ; var b [ 'c' { 'd' ,"))
	// Output:
}

func ExampleCompLitItem_case1() {
	fmt.Println(exampleAST(40, "package a ; var b [ 'c' { { } ,"))
	// Output:
}

func ExampleCompLitItem_case2() {
	fmt.Println(exampleAST(41, "package a ; var b [ 'c' { 'd' : 'e' ,"))
	// Output:
}

func ExampleCompLitItem_case3() {
	fmt.Println(exampleAST(42, "package a ; var b [ 'c' { 'd' : { } ,"))
	// Output:
}

func ExampleCompLitItemList_case0() {
	fmt.Println(exampleAST(43, "package a ; var b [ 'c' { 'd' ,"))
	// Output:
}

func ExampleCompLitItemList_case1() {
	fmt.Println(exampleAST(44, "package a ; var b [ 'c' { 'd' , 'e' ,"))
	// Output:
}

func ExampleCompLitType_case0() {
	fmt.Println(exampleAST(45, "package a ; var b [ [ ... ] c {"))
	// Output:
}

func ExampleCompLitType_case1() {
	fmt.Println(exampleAST(46, "package a ; var b = map [ c ] d {"))
	// Output:
}

func ExampleCompLitType_case2() {
	fmt.Println(exampleAST(47, "package a ; var b [ [ ] c {"))
	// Output:
}

func ExampleCompLitType_case3() {
	fmt.Println(exampleAST(48, "package a ; var b = struct { } {"))
	// Output:
}

func ExampleCompLitValue_case0() {
	fmt.Println(exampleAST(49, "package a ; var b [ 'c' { } %"))
	// Output:
}

func ExampleCompLitValue_case1() {
	fmt.Println(exampleAST(50, "package a ; var b [ 'c' { 'd' } %"))
	// Output:
}

func ExampleConstDecl_case0() {
	fmt.Println(exampleAST(51, "package a ; const ( ) ;"))
	// Output:
}

func ExampleConstDecl_case1() {
	fmt.Println(exampleAST(52, "package a ; const ( b ) ;"))
	// Output:
}

func ExampleConstDecl_case2() {
	fmt.Println(exampleAST(53, "package a ; const b ;"))
	// Output:
}

func ExampleConstSpec_case0() {
	fmt.Println(exampleAST(54, "package a ; const b )"))
	// Output:
}

func ExampleConstSpec_case1() {
	fmt.Println(exampleAST(55, "package a ; const b = 'c' )"))
	// Output:
}

func ExampleConstSpec_case2() {
	fmt.Println(exampleAST(56, "package a ; const b c = 'd' )"))
	// Output:
}

func ExampleConstSpecList_case0() {
	fmt.Println(exampleAST(57, "package a ; const ( b )"))
	// Output:
}

func ExampleConstSpecList_case1() {
	fmt.Println(exampleAST(58, "package a ; const ( b ; c )"))
	// Output:
}

func ExampleElif_case0() {
	fmt.Println(exampleAST(60, "package a ; func b ( ) { if { } else if { } ;"))
	// Output:
}

func ExampleElifList_case0() {
	fmt.Println(exampleAST(61, "package a ; func b ( ) { if { } ;") == (*ElifList)(nil))
	// Output:
}

func ExampleElifList_case1() {
	fmt.Println(exampleAST(62, "package a ; func b ( ) { if { } else if { } ;"))
	// Output:
}

func ExampleElse_case0() {
	fmt.Println(exampleAST(63, "package a ; func b ( ) { if { } ;") == (*Else)(nil))
	// Output:
}

func ExampleElse_case1() {
	fmt.Println(exampleAST(64, "package a ; func b ( ) { if { } else { } ;"))
	// Output:
}

func ExampleExpression_unary() {
	fmt.Println(exampleAST(65, "package a ; var b = 'c' %"))
	// Output:
}

func ExampleExpression_mod() {
	fmt.Println(exampleAST(66, "package a ; var b = 'c' % 'd' %"))
	// Output:
}

func ExampleExpression_and() {
	fmt.Println(exampleAST(67, "package a ; var b = 'c' & 'd' %"))
	// Output:
}

func ExampleExpression_mul() {
	fmt.Println(exampleAST(68, "package a ; var b = 'c' * 'd' %"))
	// Output:
}

func ExampleExpression_add() {
	fmt.Println(exampleAST(69, "package a ; var b = 'c' + 'd' )"))
	// Output:
}

func ExampleExpression_sub() {
	fmt.Println(exampleAST(70, "package a ; var b = 'c' - 'd' )"))
	// Output:
}

func ExampleExpression_div() {
	fmt.Println(exampleAST(71, "package a ; var b = 'c' / 'd' %"))
	// Output:
}

func ExampleExpression_lt() {
	fmt.Println(exampleAST(72, "package a ; var b = 'c' < 'd' )"))
	// Output:
}

func ExampleExpression_gt() {
	fmt.Println(exampleAST(73, "package a ; var b = 'c' > 'd' )"))
	// Output:
}

func ExampleExpression_xor() {
	fmt.Println(exampleAST(74, "package a ; var b = 'c' ^ 'd' )"))
	// Output:
}

func ExampleExpression_or() {
	fmt.Println(exampleAST(75, "package a ; var b = 'c' | 'd' )"))
	// Output:
}

func ExampleExpression_case11() {
	fmt.Println(exampleAST(76, "package a ; var b = 'c' && 'd' )"))
	// Output:
}

func ExampleExpression_andNot() {
	fmt.Println(exampleAST(77, "package a ; var b = 'c' &^ 'd' %"))
	// Output:
}

func ExampleExpression_eq() {
	fmt.Println(exampleAST(78, "package a ; var b = 'c' == 'd' )"))
	// Output:
}

func ExampleExpression_ge() {
	fmt.Println(exampleAST(79, "package a ; var b = 'c' >= 'd' )"))
	// Output:
}

func ExampleExpression_le() {
	fmt.Println(exampleAST(80, "package a ; var b = 'c' <= 'd' )"))
	// Output:
}

func ExampleExpression_lsh() {
	fmt.Println(exampleAST(81, "package a ; var b = 'c' << 'd' %"))
	// Output:
}

func ExampleExpression_ne() {
	fmt.Println(exampleAST(82, "package a ; var b = 'c' != 'd' )"))
	// Output:
}

func ExampleExpression_lOr() {
	fmt.Println(exampleAST(83, "package a ; var b = 'c' || 'd' )"))
	// Output:
}

func ExampleExpression_rsh() {
	fmt.Println(exampleAST(84, "package a ; var b = 'c' >> 'd' %"))
	// Output:
}

func ExampleExpression_rx() {
	fmt.Println(exampleAST(85, "package a ; var b = 'c' <- 'd' )"))
	// Output:
}

func ExampleExpressionList_case0() {
	fmt.Println(exampleAST(88, "package a ; var b = 'c' )"))
	// Output:
}

func ExampleExpressionList_case1() {
	fmt.Println(exampleAST(89, "package a ; const b = 'c' , 'd' )"))
	// Output:
}

func ExampleExpressionListOpt_case0() {
	fmt.Println(exampleAST(90, "package a ; func b ( ) { return ;") == (*ExpressionListOpt)(nil))
	// Output:
}

func ExampleExpressionListOpt_case1() {
	fmt.Println(exampleAST(91, "package a ; func b ( ) { return 'c' ;"))
	// Output:
}

func ExampleExpressionOpt_case0() {
	fmt.Println(exampleAST(86, "package a ; var b [ 'c' [ :") == (*ExpressionOpt)(nil))
	// Output:
}

func ExampleExpressionOpt_case1() {
	fmt.Println(exampleAST(87, "package a ; var b [ 'c' [ 'd' :"))
	// Output:
}

func ExampleFile_case0() {
	fmt.Println(exampleAST(1, "package a ;"))
	// Output:
}

func ExampleForHeader_case0() {
	fmt.Println(exampleAST(92, "package a ; func b ( ) { for range 'c' {"))
	// Output:
}

func ExampleForHeader_case1() {
	fmt.Println(exampleAST(93, "package a ; func b ( ) { for ; ; {"))
	// Output:
}

func ExampleForHeader_case2() {
	fmt.Println(exampleAST(94, "package a ; func b ( ) { for {"))
	// Output:
}

func ExampleForStatement_case0() {
	fmt.Println(exampleAST(96, "package a ; func b ( ) { for { } ;"))
	// Output:
}

func ExampleFuncDecl_case0() {
	fmt.Println(exampleAST(97, "package a ; func b ( ) ;"))
	// Output:
}

func ExampleFuncOrMethod_case0() {
	fmt.Println(exampleAST(98, "package a ; func b ( ) ;"))
	// Output:
}

func ExampleFuncType_case0() {
	fmt.Println(exampleAST(99, "package a ; var b func ( ) ;"))
	// Output:
}

func ExampleIdentifierList_case0() {
	fmt.Println(exampleAST(102, "package a ; var b ("))
	// Output:
}

func ExampleIdentifierList_case1() {
	fmt.Println(exampleAST(103, "package a ; var b , c ("))
	// Output:
}

func ExampleIdentifierOpt_case0() {
	fmt.Println(exampleAST(100, "package a ; import 'b'") == (*IdentifierOpt)(nil))
	// Output:
}

func ExampleIdentifierOpt_case1() {
	fmt.Println(exampleAST(101, "package a ; import b ;"))
	// Output:
}

func ExampleIfHeader_case0() {
	fmt.Println(exampleAST(104, "package a ; func b ( ) { switch c := 1 {"))
	// Output:
}

func ExampleIfHeader_case1() {
	fmt.Println(exampleAST(105, "package a ; func b ( ) { switch ; {"))
	// Output:
}

func ExampleIfStatement_case0() {
	fmt.Println(exampleAST(107, "package a ; func b ( ) { if { } ;"))
	// Output:
}

func ExampleImportDecl_case0() {
	fmt.Println(exampleAST(108, "package a ; import ( ) ;"))
	// Output:
}

func ExampleImportDecl_case1() {
	fmt.Println(exampleAST(109, "package a ; import ( 'b' ) ;"))
	// Output:
}

func ExampleImportDecl_case2() {
	fmt.Println(exampleAST(110, "package a ; import 'b' ;"))
	// Output:
}

func ExampleImportList_case0() {
	fmt.Println(exampleAST(116, "package a ;") == (*ImportList)(nil))
	// Output:
}

func ExampleImportList_case1() {
	fmt.Println(exampleAST(117, "package a ; import 'b' ;"))
	// Output:
}

func ExampleImportPath_case0() {
	fmt.Println(exampleAST(111, "package a ; import 'b' )"))
	// Output:
}

func ExampleImportSpec_case0() {
	fmt.Println(exampleAST(112, "package a ; import . 'b' )"))
	// Output:
}

func ExampleImportSpec_case1() {
	fmt.Println(exampleAST(113, "package a ; import 'b' )"))
	// Output:
}

func ExampleImportSpecList_case0() {
	fmt.Println(exampleAST(114, "package a ; import ( 'b' )"))
	// Output:
}

func ExampleImportSpecList_case1() {
	fmt.Println(exampleAST(115, "package a ; import ( 'b' ; 'c' )"))
	// Output:
}

func ExampleInterfaceMethodDecl_case0() {
	fmt.Println(exampleAST(120, "package a ; var b interface { c ( ) ;"))
	// Output:
}

func ExampleInterfaceMethodDecl_case1() {
	fmt.Println(exampleAST(121, "package a ; var b interface { c ;"))
	// Output:
}

func ExampleInterfaceMethodDeclList_case0() {
	fmt.Println(exampleAST(122, "package a ; var b interface { c ;"))
	// Output:
}

func ExampleInterfaceMethodDeclList_case1() {
	fmt.Println(exampleAST(123, "package a ; var b interface { c ; d ;"))
	// Output:
}

func ExampleInterfaceType_case0() {
	fmt.Println(exampleAST(118, "package a ; var b interface { } ("))
	// Output:
}

func ExampleInterfaceType_case1() {
	fmt.Println(exampleAST(119, "package a ; var b interface { c } ("))
	// Output:
}

func ExampleLBrace_case0() {
	fmt.Println(exampleAST(124, "package a ; func b ( ) { if interface { } ( nil ) { } }"))
	// Output:
}

func ExampleLBrace_case1() {
	fmt.Println(exampleAST(125, "package a ; var b interface { !"))
	// Output:
}

func ExampleLBraceCompLitItem_case0() {
	fmt.Println(exampleAST(126, "package a ; var b [ [ ] c { 'd' ,"))
	// Output:
}

func ExampleLBraceCompLitItem_case1() {
	fmt.Println(exampleAST(127, "package a ; var b [ [ ] c { 'd' : 'e' ,"))
	// Output:
}

func ExampleLBraceCompLitItem_case2() {
	fmt.Println(exampleAST(128, "package a ; var b [ [ ] c { 'd' : { } ,"))
	// Output:
}

func ExampleLBraceCompLitItem_case3() {
	fmt.Println(exampleAST(129, "package a ; var b [ [ ] c { { } ,"))
	// Output:
}

func ExampleLBraceCompLitItemList_case0() {
	fmt.Println(exampleAST(130, "package a ; var b [ [ ] c { 'd' ,"))
	// Output:
}

func ExampleLBraceCompLitItemList_case1() {
	fmt.Println(exampleAST(131, "package a ; var b [ [ ] c { 'd' , 'e' ,"))
	// Output:
}

func ExampleLBraceCompLitValue_case0() {
	fmt.Println(exampleAST(132, "package a ; var b [ [ ] c { } %"))
	// Output:
}

func ExampleLBraceCompLitValue_case1() {
	fmt.Println(exampleAST(133, "package a ; var b [ [ ] c { 'd' } %"))
	// Output:
}

func ExampleMapType_case0() {
	fmt.Println(exampleAST(134, "package a ; var b map [ c ] d ("))
	// Output:
}

func ExampleOperand_case0() {
	fmt.Println(exampleAST(137, "package a ; var b [ ( 'c' ) %"))
	// Output:
}

func ExampleOperand_case1() {
	fmt.Println(exampleAST(138, "package a ; var b [ ( chan c ) %"))
	// Output:
}

func ExampleOperand_case2() {
	fmt.Println(exampleAST(139, "package a ; var b [ 'c' %"))
	// Output:
}

func ExampleOperand_case3() {
	fmt.Println(exampleAST(141, "package a ; var b [ func ( ) { } %"))
	// Output:
}

func ExampleOperand_case5() {
	fmt.Println(exampleAST(143, "package a ; var b [ c %"))
	// Output:
}

func ExampleParameterDecl_case0() {
	fmt.Println(exampleAST(144, "package a ; func ( ... b )"))
	// Output:
}

func ExampleParameterDecl_case1() {
	fmt.Println(exampleAST(145, "package a ; func ( b ... c )"))
	// Output:
}

func ExampleParameterDecl_case2() {
	fmt.Println(exampleAST(146, "package a ; func ( b c )"))
	// Output:
}

func ExampleParameterDecl_case3() {
	fmt.Println(exampleAST(147, "package a ; func b ( ) ( c ,"))
	// Output:
}

func ExampleParameterDeclList_case0() {
	fmt.Println(exampleAST(148, "package a ; func ( b )"))
	// Output:
}

func ExampleParameterDeclList_case1() {
	fmt.Println(exampleAST(149, "package a ; func ( b , c )"))
	// Output:
}

func ExampleParameters_case0() {
	fmt.Println(exampleAST(150, "package a ; func ( ) ("))
	// Output:
}

func ExampleParameters_case1() {
	fmt.Println(exampleAST(151, "package a ; func ( b ) ("))
	// Output:
}

func ExamplePrimaryExpression_case00() {
	fmt.Println(exampleAST(152, "package a ; var b [ 'c' %"))
	// Output:
}

func ExamplePrimaryExpression_case01() {
	fmt.Println(exampleAST(153, "package a ; var b [ [ ] c { } %"))
	// Output:
}

func ExamplePrimaryExpression_case02() {
	fmt.Println(exampleAST(154, "package a ; var b [ 'c' . ( type ) %"))
	// Output:
}

func ExamplePrimaryExpression_case03() {
	fmt.Println(exampleAST(155, "package a ; var b [ 'c' . ( d ) %"))
	// Output:
}

func ExamplePrimaryExpression_case04() {
	fmt.Println(exampleAST(156, "package a ; var b [ 'c' . d %"))
	// Output:
}

func ExamplePrimaryExpression_case05() {
	fmt.Println(exampleAST(157, "package a ; var b [ 'c' [ 'd' ] %"))
	// Output:
}

func ExamplePrimaryExpression_case06() {
	fmt.Println(exampleAST(158, "package a ; var b [ 'c' [ : : ] %"))
	// Output:
}

func ExamplePrimaryExpression_case07() {
	fmt.Println(exampleAST(159, "package a ; var b [ 'c' [ : ] %"))
	// Output:
}

func ExamplePrimaryExpression_case08() {
	fmt.Println(exampleAST(160, "package a ; var b [ 'c' ( ) %"))
	// Output:
}

func ExamplePrimaryExpression_case09() {
	fmt.Println(exampleAST(161, "package a ; var b [ 'c' { } %"))
	// Output:
}

func ExamplePrimaryExpression_case10() {
	fmt.Println(exampleAST(162, "package a ; var b [ chan c ( 'd' ) %"))
	// Output:
}

func ExamplePrologue_case0() {
	fmt.Println(exampleAST(164, "package a ;"))
	// Output:
}

func ExampleQualifiedIdent_case0() {
	fmt.Println(exampleAST(135, "package a ; var b c ("))
	// Output:
}

func ExampleQualifiedIdent_case1() {
	fmt.Println(exampleAST(136, "package a ; var b c . d ("))
	// Output:
}

func ExampleRange_case0() {
	fmt.Println(exampleAST(166, "package a ; func b ( ) { for 'c' = range 'd' {"))
	// Output:
}

func ExampleRange_case1() {
	fmt.Println(exampleAST(167, "package a ; func b ( ) { for 'c' := range 'd' {"))
	// Output:
}

func ExampleRange_case2() {
	fmt.Println(exampleAST(168, "package a ; func b ( ) { for range 'c' {"))
	// Output:
}

func ExampleReceiverOpt_case0() {
	fmt.Println(exampleAST(169, "package a ; func b") == (*ReceiverOpt)(nil))
	// Output:
}

func ExampleReceiverOpt_case1() {
	fmt.Println(exampleAST(170, "package a ; func ( ) b"))
	// Output:
}

func ExampleResultOpt_case0() {
	fmt.Println(exampleAST(171, "package a ; func b ( ) )") == (*ResultOpt)(nil))
	// Output:
}

func ExampleResultOpt_case1() {
	fmt.Println(exampleAST(172, "package a ; func b ( ) ( ) ("))
	// Output:
}

func ExampleResultOpt_case2() {
	fmt.Println(exampleAST(173, "package a ; func b ( ) c ("))
	// Output:
}

func ExampleSelectStatement_case0() {
	fmt.Println(exampleAST(174, "package a ; func b ( ) { select { } ;"))
	// Output:
}

func ExampleSemicolonOpt_case0() {
	fmt.Println(exampleAST(175, "package a ; import ( 'b' )") == (*SemicolonOpt)(nil))
	// Output:
}

func ExampleSemicolonOpt_case1() {
	fmt.Println(exampleAST(176, "package a ; import ( 'b' ; )"))
	// Output:
}

func ExampleSignature_case0() {
	fmt.Println(exampleAST(177, "package a ; func b ( ) ;"))
	// Output:
}

func ExampleSimpleStatement_case0() {
	fmt.Println(exampleAST(178, "package a ; func b ( ) { 'c' = 'd' ;"))
	// Output:
}

func ExampleSimpleStatement_case1() {
	fmt.Println(exampleAST(179, "package a ; func b ( ) { 'c' ;"))
	// Output:
}

func ExampleSimpleStatement_case2() {
	fmt.Println(exampleAST(180, "package a ; func b ( ) { 'c' -- ;"))
	// Output:
}

func ExampleSimpleStatement_case3() {
	fmt.Println(exampleAST(181, "package a ; func b ( ) { 'c' ++ ;"))
	// Output:
}

func ExampleSimpleStatement_case4() {
	fmt.Println(exampleAST(182, "package a ; func b ( ) { 'c' := 'd' ;"))
	// Output:
}

func ExampleSimpleStatementOpt_case0() {
	fmt.Println(exampleAST(183, "package a ; func b ( ) { switch ;") == (*SimpleStatementOpt)(nil))
	// Output:
}

func ExampleSimpleStatementOpt_case1() {
	fmt.Println(exampleAST(184, "package a ; func b ( ) { switch 'c' ;"))
	// Output:
}

func ExampleSliceType_case0() {
	fmt.Println(exampleAST(185, "package a ; var b [ ] c ("))
	// Output:
}

func ExampleStatement_case0() {
	fmt.Println(exampleAST(186, "package a ; var b [ func ( ) { ;") == (*Statement)(nil))
	// Output:
}

func ExampleStatement_case1() {
	fmt.Println(exampleAST(187, "package a ; func b ( ) { { } ;"))
	// Output:
}

func ExampleStatement_case2() {
	fmt.Println(exampleAST(188, "package a ; func b ( ) { const c ;"))
	// Output:
}

func ExampleStatement_case3() {
	fmt.Println(exampleAST(189, "package a ; func b ( ) { type ( ) ;"))
	// Output:
}

func ExampleStatement_case4() {
	fmt.Println(exampleAST(190, "package a ; func b ( ) { var ( ) ;"))
	// Output:
}

func ExampleStatement_case5() {
	fmt.Println(exampleAST(191, "package a ; func b ( ) { break ;"))
	// Output:
}

func ExampleStatementList_case0() {
	fmt.Println(exampleAST(192, "package a ; func b ( ) { return }"))
	// Output:
}

func ExampleStatementList_case1() {
	fmt.Println(exampleAST(193, "package a ; func b ( ) { ; ;"))
	// Output:
}

func ExampleStatementNonDecl_case00() {
	fmt.Println(exampleAST(194, "package a ; func b ( ) { break ;"))
	// Output:
}

func ExampleStatementNonDecl_case01() {
	fmt.Println(exampleAST(195, "package a ; func b ( ) { continue ;"))
	// Output:
}

func ExampleStatementNonDecl_case02() {
	fmt.Println(exampleAST(196, "package a ; func b ( ) { defer 'c' ;"))
	// Output:
}

func ExampleStatementNonDecl_case03() {
	fmt.Println(exampleAST(197, "package a ; func b ( ) { fallthrough ;"))
	// Output:
}

func ExampleStatementNonDecl_case04() {
	fmt.Println(exampleAST(198, "package a ; func b ( ) { for { } ;"))
	// Output:
}

func ExampleStatementNonDecl_case05() {
	fmt.Println(exampleAST(199, "package a ; func b ( ) { go 'c' ;"))
	// Output:
}

func ExampleStatementNonDecl_case06() {
	fmt.Println(exampleAST(200, "package a ; func b ( ) { goto c ;"))
	// Output:
}

func ExampleStatementNonDecl_case07() {
	fmt.Println(exampleAST(201, "package a ; func b ( ) { c : ;"))
	// Output:
}

func ExampleStatementNonDecl_case08() {
	fmt.Println(exampleAST(202, "package a ; func b ( ) { if { } ;"))
	// Output:
}

func ExampleStatementNonDecl_case09() {
	fmt.Println(exampleAST(203, "package a ; func b ( ) { return ;"))
	// Output:
}

func ExampleStatementNonDecl_case10() {
	fmt.Println(exampleAST(204, "package a ; func b ( ) { select { } ;"))
	// Output:
}

func ExampleStatementNonDecl_case11() {
	fmt.Println(exampleAST(205, "package a ; func b ( ) { 'c' ;"))
	// Output:
}

func ExampleStatementNonDecl_case12() {
	fmt.Println(exampleAST(206, "package a ; func b ( ) { switch { } ;"))
	// Output:
}

func ExampleStringLitOpt_case0() {
	fmt.Println(exampleAST(208, "package a ; var b struct { c ;") == (*StringLitOpt)(nil))
	// Output:
}

func ExampleStringLitOpt_case1() {
	fmt.Println(exampleAST(209, "package a ; var b struct { c \"d\" ;"))
	// Output:
}

func ExampleStructFieldDecl_case0() {
	fmt.Println(exampleAST(210, "package a ; var b struct { * c ;"))
	// Output:
}

func ExampleStructFieldDecl_case1() {
	fmt.Println(exampleAST(211, "package a ; var b struct { c d ;"))
	// Output:
}

func ExampleStructFieldDecl_case2() {
	fmt.Println(exampleAST(212, "package a ; var b struct { c ;"))
	// Output:
}

func ExampleStructFieldDecl_case3() {
	fmt.Println(exampleAST(213, "package a ; var b struct { ( c ) ;"))
	// Output:
}

func ExampleStructFieldDecl_case4() {
	fmt.Println(exampleAST(214, "package a ; var b struct { ( * c ) ;"))
	// Output:
}

func ExampleStructFieldDecl_case5() {
	fmt.Println(exampleAST(215, "package a ; var b struct { * ( c ) ;"))
	// Output:
}

func ExampleStructFieldDeclList_case0() {
	fmt.Println(exampleAST(216, "package a ; var b struct { c ;"))
	// Output:
}

func ExampleStructFieldDeclList_case1() {
	fmt.Println(exampleAST(217, "package a ; var b struct { c ; d ;"))
	// Output:
}

func ExampleStructType_case0() {
	fmt.Println(exampleAST(218, "package a ; var b struct { } ("))
	// Output:
}

func ExampleStructType_case1() {
	fmt.Println(exampleAST(219, "package a ; var b struct { c } ("))
	// Output:
}

func ExampleSwitchBody_case0() {
	fmt.Println(exampleAST(220, "package a ; func b ( ) { switch { } ;"))
	// Output:
}

func ExampleSwitchBody_case1() {
	fmt.Println(exampleAST(221, "package a ; func b ( ) { switch { default : } ;"))
	// Output:
}

func ExampleSwitchCase_case0() {
	fmt.Println(exampleAST(222, "package a ; func b ( ) { switch { case 'c' : !"))
	// Output:
}

func ExampleSwitchCase_case1() {
	fmt.Println(exampleAST(223, "package a ; func b ( ) { switch { case 'c' = 'd' : !"))
	// Output:
}

func ExampleSwitchCase_case2() {
	fmt.Println(exampleAST(224, "package a ; func b ( ) { switch { case 'c' := 'd' : !"))
	// Output:
}

func ExampleSwitchCase_case3() {
	fmt.Println(exampleAST(225, "package a ; func b ( ) { switch { default : !"))
	// Output:
}

func ExampleSwitchCaseBlock_case0() {
	fmt.Println(exampleAST(227, "package a ; func b ( ) { switch { default : }"))
	// Output:
}

func ExampleSwitchCaseList_case0() {
	fmt.Println(exampleAST(228, "package a ; func b ( ) { switch { default : }"))
	// Output:
}

func ExampleSwitchCaseList_case1() {
	fmt.Println(exampleAST(229, "package a ; func b ( ) { switch { default : default : }"))
	// Output:
}

func ExampleSwitchStatement_case0() {
	fmt.Println(exampleAST(231, "package a ; func b ( ) { switch { } ;"))
	// Output:
}

func ExampleTopLevelDecl_case0() {
	fmt.Println(exampleAST(232, "package a ; const b ;"))
	// Output:
}

func ExampleTopLevelDecl_case1() {
	fmt.Println(exampleAST(233, "package a ; func b ( ) ;"))
	// Output:
}

func ExampleTopLevelDecl_case2() {
	fmt.Println(exampleAST(234, "package a ; type ( ) ;"))
	// Output:
}

func ExampleTopLevelDecl_case3() {
	fmt.Println(exampleAST(235, "package a ; var ( ) ;"))
	// Output:
}

func ExampleTopLevelDeclList_case0() {
	fmt.Println(exampleAST(237, "package a ;") == (*TopLevelDeclList)(nil))
	// Output:
}

func ExampleTopLevelDeclList_case1() {
	fmt.Println(exampleAST(238, "package a ; const b ;"))
	// Output:
}

func ExampleType_case00() {
	fmt.Println(exampleAST(239, "package a ; var b ( c ) ("))
	// Output:
}

func ExampleType_case01() {
	fmt.Println(exampleAST(240, "package a ; var b * c ("))
	// Output:
}

func ExampleType_case02() {
	fmt.Println(exampleAST(241, "package a ; var b [ ... ] c ("))
	// Output:
}

func ExampleType_case03() {
	fmt.Println(exampleAST(242, "package a ; var b chan c ("))
	// Output:
}

func ExampleType_case04() {
	fmt.Println(exampleAST(243, "package a ; var b func ( ) ;"))
	// Output:
}

func ExampleType_case05() {
	fmt.Println(exampleAST(244, "package a ; var b interface { } ("))
	// Output:
}

func ExampleType_case06() {
	fmt.Println(exampleAST(245, "package a ; var b map [ c ] d ("))
	// Output:
}

func ExampleType_case07() {
	fmt.Println(exampleAST(246, "package a ; var b c ("))
	// Output:
}

func ExampleType_case08() {
	fmt.Println(exampleAST(247, "package a ; var b [ ] c ("))
	// Output:
}

func ExampleType_case09() {
	fmt.Println(exampleAST(248, "package a ; var b struct { } ("))
	// Output:
}

func ExampleTypeDecl_case0() {
	fmt.Println(exampleAST(249, "package a ; type ( ) ;"))
	// Output:
}

func ExampleTypeDecl_case1() {
	fmt.Println(exampleAST(250, "package a ; type ( b c ) ;"))
	// Output:
}

func ExampleTypeDecl_case2() {
	fmt.Println(exampleAST(251, "package a ; type b c ;"))
	// Output:
}

func ExampleTypeLiteral_case0() {
	fmt.Println(exampleAST(252, "package a ; var b [ * chan c )"))
	// Output:
}

func ExampleTypeLiteral_case1() {
	fmt.Println(exampleAST(253, "package a ; var b [ [ ... ] c ("))
	// Output:
}

func ExampleTypeLiteral_case2() {
	fmt.Println(exampleAST(254, "package a ; var b [ chan c ("))
	// Output:
}

func ExampleTypeLiteral_case3() {
	fmt.Println(exampleAST(255, "package a ; var b = ( func ( ) ) ( c )"))
	// Output:
}

func ExampleTypeLiteral_case4() {
	fmt.Println(exampleAST(256, "package a ; var b [ interface { } ("))
	// Output:
}

func ExampleTypeLiteral_case5() {
	fmt.Println(exampleAST(257, "package a ; var b = map [ c ] d ("))
	// Output:
}

func ExampleTypeLiteral_case6() {
	fmt.Println(exampleAST(258, "package a ; var b [ [ ] c ("))
	// Output:
}

func ExampleTypeLiteral_case7() {
	fmt.Println(exampleAST(259, "package a ; var b = struct { } ("))
	// Output:
}

func ExampleTypeSpec_case0() {
	fmt.Println(exampleAST(260, "package a ; type b c )"))
	// Output:
}

func ExampleTypeSpecList_case0() {
	fmt.Println(exampleAST(261, "package a ; type ( b c )"))
	// Output:
}

func ExampleTypeSpecList_case1() {
	fmt.Println(exampleAST(262, "package a ; type ( b c ; d e )"))
	// Output:
}

func ExampleUnaryExpression_case0() {
	fmt.Println(exampleAST(263, "package a ; var b [ ! 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case1() {
	fmt.Println(exampleAST(264, "package a ; var b [ & 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case2() {
	fmt.Println(exampleAST(265, "package a ; var b [ * 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case3() {
	fmt.Println(exampleAST(266, "package a ; var b [ + 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case4() {
	fmt.Println(exampleAST(267, "package a ; var b [ - 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case5() {
	fmt.Println(exampleAST(268, "package a ; var b [ ^ 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case6() {
	fmt.Println(exampleAST(269, "package a ; var b [ <- 'c' %"))
	// Output:
}

func ExampleUnaryExpression_case7() {
	fmt.Println(exampleAST(270, "package a ; var b [ 'c' %"))
	// Output:
}

func ExampleVarDecl_case0() {
	fmt.Println(exampleAST(271, "package a ; var ( ) ;"))
	// Output:
}

func ExampleVarDecl_case1() {
	fmt.Println(exampleAST(272, "package a ; var ( b c ) ;"))
	// Output:
}

func ExampleVarDecl_case2() {
	fmt.Println(exampleAST(273, "package a ; var b c ;"))
	// Output:
}

func ExampleVarSpec_case0() {
	fmt.Println(exampleAST(274, "package a ; var b = 'c' )"))
	// Output:
}

func ExampleVarSpec_case1() {
	fmt.Println(exampleAST(275, "package a ; var b c )"))
	// Output:
}

func ExampleVarSpec_case2() {
	fmt.Println(exampleAST(276, "package a ; var b c = 'd' )"))
	// Output:
}

func ExampleVarSpecList_case0() {
	fmt.Println(exampleAST(277, "package a ; var ( b c )"))
	// Output:
}

func ExampleVarSpecList_case1() {
	fmt.Println(exampleAST(278, "package a ; var ( b c ; d e )"))
	// Output:
}
